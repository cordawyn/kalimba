require "securerandom"

# TODO: make it possible to choose a backend
# (e.g., Redland, RDF.rb, others)
require "active_redlander/persistence/redlander"

module ActiveRedlander
  # @abstract
  #   Backend implementations should override all methods
  #   that delegate processing to their parent class (invoking "super").
  module Persistence
    # TODO: make it possible to choose a backend
    # (e.g., Redland, RDF.rb, others)
    include ActiveRedlander::Persistence::Redlander

    class << self
      # Create an instance of the backend storage (repository)
      #
      # @param [Hash] options backend storage options
      # @return [Any] instance of the backend storage
      def create_repository(options = {})
        super
      end
    end

    # Check whether the model has never been persisted
    #
    # @return [Boolean]
    def new_record?
      super
    end

    # Check whether the model has ever been persisted
    #
    # @return [Boolean]
    def persisted?
      super
    end

    # Check whether the model has been destroyed
    # (remove from the storage)
    #
    # @return [Boolean]
    def destroyed?
      @destroyed
    end

    # Retrieve model attributes from the backend storage
    #
    # @return [self]
    def reload
      super
      self
    end

    # Remove the resource from the backend storage
    #
    # @return [Boolean]
    def destroy
      if !destroyed? && persisted? && super
        @destroyed = true
        freeze
      else
        false
      end
    end

    # Assign attributes from the given hash and persist the model
    #
    # @param [Hash<[Symbol, String] => Any>] properties
    # @return [Boolean]
    def update_attributes(properties = {})
      assign_attributes(properties)
      save
    end

    # Persist the model into the backend storage
    #
    # @raise [ActiveRedlanderError] if fails to obtain the subject for a new record
    # @return [Boolean]
    def save
      @subject = generate_subject if new_record?
      if super
        @previously_changed = changes
        @changed_attributes.clear
        true
      else
        false
      end
    end

    private

    # Overridden implementation should return URI for the subject, generated by
    # using specific random/default/sequential URI generation capabilities.
    # Otherwise it should return nil.
    #
    # @return [URI, nil]
    def generate_subject
      super ||
        if self.class.base_uri
          self.class.base_uri.merge("##{SecureRandom.urlsafe_base64}")
        else
          raise ActiveRedlander::ActiveRedlanderError, "Cannot generate subject without base URI for #{self.class}"
        end
    end
  end
end
